# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VXzoW88SpKSJMbbdU4WS8qNaJ3YoIbPU
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# load data files and assign corresponding names
file_paths = [
    'API_DT.NFL.PBND.CD_DS2_en_csv_v2_4038.csv',
    'API_FP.CPI.TOTL.ZG_DS2_en_csv_v2_157.csv',
    'API_GC.XPN.INTP.CN_DS2_en_csv_v2_4242.csv',
    'API_NY.GDP.MKTP.KD.ZG_DS2_en_csv_v2_11.csv'
]
file_names = [
    'Public Bonds',
    'Inflation',
    'Government Expenditure',
    'GDP Growth'
]

# prepare a list for storing dataframes
data_frames = []
for file, name in zip(file_paths, file_names):
    df = pd.read_csv(file, skiprows=4)  # read each csv file and skip the first 4 rows
    df['Dataset Name'] = name  # add a column with the dataset name
    data_frames.append(df)  # append the dataframe to the list

# combine all datasets into one dataframe
combined_data = pd.concat(data_frames, ignore_index=True)

# filter necessary columns and remove rows with missing values
filtered_data = combined_data[['Country Name', 'Country Code', 'Indicator Name', 'Dataset Name',
                               '1992', '1993', '1994', '1995', '1996', '1997',
                               '1998', '1999', '2000', '2001', '2002', '2003',
                               '2004', '2005', '2006', '2007', '2008']]
filtered_data = filtered_data.dropna()

# keep data specific to the United States
filtered_data = filtered_data[filtered_data['Country Name'] == 'United States']

# define a function for calculating the next iteration value based on an economic indicator
def g_function(x, economic_indicator):
    return 0.85 * x + 0.15 * economic_indicator

# implement a fixed-point iteration method to find equilibrium interest rates
def fixed_point_iteration(initial_guess, economic_indicator, tolerance=1e-6, max_iterations=100):
    x = initial_guess
    for i in range(max_iterations):
        new_x = g_function(x, economic_indicator)
        if abs(new_x - x) < tolerance:  # check if the difference is within the tolerance
            return new_x, i  # return the equilibrium value and the iteration count
        x = new_x
    return None, max_iterations  # return None if convergence is not achieved

# classify the risk level based on the equilibrium interest rate
def calculate_risk(equilibrium_rate):
    if equilibrium_rate > 30:
        return "Critical Risk"
    elif equilibrium_rate > 20:
        return "High Risk"
    elif equilibrium_rate > 12:
        return "Medium Risk"
    elif equilibrium_rate > 5:
        return "Low Risk"
    else:
        return "Very Low Risk"

# initialize an empty list to store risk data
risk_data = []
columns_to_calculate = [str(year) for year in range(1992, 2009)]

# iterate through rows of the filtered dataframe
for _, row in filtered_data.iterrows():
    dataset = row['Dataset Name']
    for year in columns_to_calculate:
        economic_indicator = row[year]  # get the economic indicator for the year
        stable_rate, iterations = fixed_point_iteration(initial_guess=5, economic_indicator=economic_indicator)
        if stable_rate is not None:  # ensure a valid stable rate was found
            risk_level = calculate_risk(stable_rate)  # classify the risk level
            risk_data.append({
                'Year': int(year),
                'Dataset Name': dataset,
                'Stable Rate': stable_rate,
                'Economic Indicator': economic_indicator,
                'Risk Level': risk_level,
                'Iterations': iterations
            })

# convert the risk data into a pandas dataframe
risk_df = pd.DataFrame(risk_data)

print(risk_df.head())

# create a line plot for equilibrium interest rates by dataset
plt.figure(figsize=(10, 7))
if 'Dataset Name' in risk_df.columns:
    for dataset in risk_df['Dataset Name'].unique():
        dataset_data = risk_df[risk_df['Dataset Name'] == dataset]
        plt.plot(dataset_data['Year'], dataset_data['Stable Rate'], marker='o', label=dataset)
else:
    print("Dataset Name column is missing in risk_df")

# annotate the graph with risk levels
for _, row in risk_df.iterrows():
    plt.text(row['Year'], row['Stable Rate'] + 0.5, row['Risk Level'],
             fontsize=6, ha='center', va='bottom', color='red')

plt.title('Equilibrium Interest Rates and Risk Levels for United States (1992-2008)', fontsize=24)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Equilibrium Interest Rate (%)', fontsize=12)
plt.ylim(0, 35)  # set y-axis limits
plt.legend(title='Dataset')
plt.grid(True, linestyle='--', alpha=0.7)
plt.subplots_adjust(top=0.85, bottom=0.2, left=0.15, right=0.95)  # adjust plot layout
plt.show()

# create subplots for detailed analysis
fig, axs = plt.subplots(2, 2, figsize=(18, 12))

# plot inflation data
inflation_data = risk_df[risk_df['Dataset Name'] == 'Inflation']
axs[0, 0].plot(inflation_data['Year'], inflation_data['Stable Rate'], marker='o', linestyle='-', color='blue')
axs[0, 0].set_title('Inflation vs. Equilibrium Interest Rates', fontsize=14, fontweight='bold')
axs[0, 0].set_xlabel('Year', fontsize=12)
axs[0, 0].set_ylabel('Equilibrium Interest Rate (%)', fontsize=12)
axs[0, 0].grid(True, linestyle='--', alpha=0.6)

# plot GDP growth data
gdp_growth_data = risk_df[risk_df['Dataset Name'] == 'GDP Growth']
axs[1, 0].plot(gdp_growth_data['Year'], gdp_growth_data['Stable Rate'], marker='d', linestyle='-', color='red')
axs[1, 0].set_title('GDP Growth vs. Equilibrium Interest Rates', fontsize=14, fontweight='bold')
axs[1, 0].set_xlabel('Year', fontsize=12)
axs[1, 0].set_ylabel('Equilibrium Interest Rate (%)', fontsize=12)
axs[1, 0].grid(True, linestyle='--', alpha=0.6)

# compare all datasets in one subplot
for dataset in risk_df['Dataset Name'].unique():
    dataset_data = risk_df[risk_df['Dataset Name'] == dataset]
    axs[1, 1].plot(dataset_data['Year'], dataset_data['Stable Rate'], marker='o', label=dataset)
axs[1, 1].set_title('Combined Dataset vs. Equilibrium Interest Rates', fontsize=14, fontweight='bold')
axs[1, 1].set_xlabel('Year', fontsize=12)
axs[1, 1].legend(title='Dataset', fontsize=10, loc='upper left')
axs[1, 1].grid(True, linestyle='--', alpha=0.6)

plt.tight_layout(pad=2.0)
plt.show()

# create a bar chart for risk levels over time
plt.figure(figsize=(6.75, 4.5))
risk_colors = {
    'Very Low Risk': 'green',
    'Low Risk': 'blue',
    'Medium Risk': 'orange',
    'High Risk': 'red',
    'Critical Risk': 'purple'
}

for risk_level, color in risk_colors.items():
    subset = risk_df[risk_df['Risk Level'] == risk_level]
    plt.bar(subset['Year'], subset['Stable Rate'], color=color, label=risk_level)

plt.title('Risk Levels Over Time', fontsize=16, fontweight='bold')
plt.xlabel('Year', fontsize=12)
plt.ylabel('Equilibrium Interest Rate (%)', fontsize=12)
plt.legend(title='Risk Level', fontsize=10)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# visualize the number of iterations required for convergence
plt.figure(figsize=(6.75, 4.5))

for dataset in risk_df['Dataset Name'].unique():
    dataset_data = risk_df[risk_df['Dataset Name'] == dataset]
    plt.plot(dataset_data['Year'], dataset_data['Iterations'], marker='o', label=dataset)

plt.title('Number of Iterations to Convergence by Dataset', fontsize=16, fontweight='bold')
plt.xlabel('Year', fontsize=12)
plt.ylabel('Number of Iterations', fontsize=12)
plt.legend(title='Dataset', fontsize=10)
plt.grid(True, linestyle='--', alpha=0.7)
plt.show()